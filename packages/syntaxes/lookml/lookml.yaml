scopeName: source.lookml

patterns:
  - include: "#comments"
  - include: "#model"
  - include: "#explore"
  - include: "#view"
  - include: "#test"
  - include: "#string"
  - include: "#undefined_block"

repository:
  # ==============================================
  # Model specific parameter blocks
  # ==============================================
  model:
    patterns:
      - include: "#model_option_string"
      - include: "#model_option_numeric"
      - include: "#model_option_ident"
      - include: "#model_option_yesno"
      - include: "#week_start_day"
      - include: "#named_value_format"
      - include: "#map_layer"
      - include: "#datagroup"
      - include: "#access_grant"

  model_option_string:
    match: \b(label|connection|include|persist_for)\s*:\s*(\w*)
    captures:
      1:
        name: keyword.control.option_string.lookml
      2:
        name: invalid.illegal.string.lookml

  model_option_numeric:
    match: \b(fiscal_month_offset)\s*:\s*(\w*)
    captures:
      1:
        name: keyword.control.option_numeric.lookml
      2:
        patterns:
          - include: "#numeric"

  model_option_ident:
    match: \b(persist_with)\s*:\s*([A-Za-z0-9_$@*.-]*)
    captures:
      1:
        name: keyword.control.option_ident.lookml
      2:
        patterns:
          - include: "#ident_no_dot"

  model_option_yesno:
    match: \b(case_sensitive)\s*:\s*(\w*)
    captures:
      1:
        name: keyword.control.option_yesno.lookml
      2:
        patterns:
          - include: "#yesno"

  week_start_day:
    match: \b(week_start_day)\s*:\s*(\w*)
    captures:
      1:
        name: keyword.control.week_start_day.lookml
      2:
        patterns:
          - name: support.constant.day.lookml
            match: \b(monday|tuesday|wednesday|thursday|friday|saturday|sunday)\b
          - name: invalid.illegal.day.lookml
            match: "[^\\s]+"

  # ------------------------------
  # named value format
  # ------------------------------
  named_value_format:
    begin: \b(named_value_format)\s*:\s*([A-Za-z0-9_$@*.-]*)\s*\{
    beginCaptures:
      1:
        name: keyword.control.named_value_format.lookml
      2:
        patterns:
          - include: "#ident_no_dot"
    end: \}
    patterns:
      - include: "#comments"
      - include: "#named_value_format_option_string"
      - include: "#named_value_format_option_yesno"
      - include: "#string"
      - include: "#undefined_block"


  named_value_format_option_string:
    match: \b(value_format)\s*:\s*(\w*)
    captures:
      1:
        name: keyword.control.option_string.lookml
      2:
        name: invalid.illegal.string.lookml

  named_value_format_option_yesno:
    match: \b(strict_value_format)\s*:\s*(\w*)
    captures:
      1:
        name: keyword.control.option_yesno.lookml
      2:
        patterns:
          - include: "#yesno"

  # ------------------------------
  # map layer
  # ------------------------------
  map_layer:
    begin: \b(map_layer)\s*:\s*([A-Za-z0-9_$@*.-]*)\s*\{
    beginCaptures:
      1:
        name: keyword.control.map_layer.lookml
      2:
        patterns:
          - include: "#ident_no_dot"
    end: \}
    patterns:
      - include: "#comments"
      - include: "#map_layer_option_string"
      - include: "#map_layer_option_numeric"
      - include: "#map_layer_option_ident"
      - include: "#map_layer_format"
      - include: "#string"
      - include: "#undefined_block"

  map_layer_option_string:
    match: \b(extents_json_url|feature_key|file|label|property_key|property_label_key|url)\s*:\s*(\w*)
    captures:
      1:
        name: keyword.control.option_string.lookml
      2:
        name: invalid.illegal.string.lookml

  map_layer_option_numeric:
    match: \b((max|min)_zoom_level)\s*:\s*(\w*)
    captures:
      1:
        name: keyword.control.option_numeric.lookml
      3:
        patterns:
          - include: "#numeric"

  map_layer_option_ident:
    match: \b(projection)\s*:\s*([A-Za-z0-9_$@*.-]*)
    captures:
      1:
        name: keyword.control.option_ident.lookml
      2:
        patterns:
          - include: "#ident_no_dot"

  map_layer_format:
    match: \b(format)\s*:\s*(\w*)
    captures:
      1:
        name: keyword.control.format.lookml
      2:
        patterns:
          - name: support.constant.day.lookml
            match: \b(topojson|vector_tile_region)\b
          - name: invalid.illegal.day.lookml
            match: "[^\\s]+"

  # ------------------------------
  # data group
  # ------------------------------
  datagroup:
    begin: \b(datagroup)\s*:\s*([A-Za-z0-9_$@*.-]*)\s*\{
    beginCaptures:
      1:
        name: keyword.control.datagroup.lookml
      2:
        patterns:
          - include: "#ident_no_dot"
    end: \}
    patterns:
      - include: "#comments"
      - include: "#datagroup_option_string"
      - include: "#datagroup_sql_trigger"
      - include: "#string"
      - include: "#undefined_block"

  datagroup_option_string:
    match: \b(label|description|max_cache_age)\s*:\s*(\w*)
    captures:
      1:
        name: keyword.control.option_string.lookml
      2:
        name: invalid.illegal.string.lookml

  datagroup_sql_trigger:
    begin: \b(sql_trigger)\s*:\s*
    beginCaptures:
      1:
        name: keyword.control.sql_option.lookml
    end: ;;
    endCaptures:
      0:
        name: punctuation.terminator.semi_semi.lookml
    patterns:
      - begin: \G
        end: (?=;;)
        contentName: meta.embedded.block.sql
        patterns:
          - include: "#constant_ref"
          - include: "source.sql"

  # ------------------------------
  # access grant
  # ------------------------------
  access_grant:
    begin: \b(access_grant)\s*:\s*([A-Za-z0-9_$@*.-]*)\s*\{
    beginCaptures:
      1:
        name: keyword.control.access_grant.lookml
      2:
        patterns:
          - include: "#ident_no_dot"
    end: \}
    patterns:
      - include: "#comments"
      - include: "#access_grant_option_ident"
      - include: "#access_grant_option_string_array"
      - include: "#undefined_block"

  access_grant_option_ident:
    match: \b(user_attribute)\s*:\s*([A-Za-z0-9_$@*.-]*)
    captures:
      1:
        name: keyword.control.option_ident.lookml
      2:
        patterns:
          - include: "#ident_no_dot"

  access_grant_option_string_array:
    begin: \b(allowed_values)\s*:\s*\[
    beginCaptures:
      1:
        name: keyword.control.option_string_array.lookml
    end: \]
    patterns:
      - include: "#comments"
      - include: "#string"


  # ==============================================
  # explore specific parameter blocks
  # ==============================================
  explore:
    begin: \b(explore)\s*:\s*\+?([A-Za-z0-9_$@*.-]*)\s*\{
    beginCaptures:
      1:
        name: keyword.control.explore.lookml
      2:
        patterns:
          - include: "#ident_no_dot"
    end: \}
    patterns:
      - include: "#comments"
      - include: "#explore_option_string"
      - include: "#explore_option_string_array"
      - include: "#explore_option_yesno"
      - include: "#explore_option_ident"
      - include: "#explore_option_ident_array"
      - include: "#explore_option_ident_no_dot_array"
      - include: "#explore_option_sql"
      - include: "#extension"
      - include: "#fields_explore"
      - include: "#access_filter"
      - include: "#always_filter"
      - include: "#conditionally_filter"
      - include: "#join"
      - include: "#aggregate_table"
      - include: "#quick_start_query"
      - include: "#string"
      - include: "#undefined_block"

  explore_option_string:
    match: \b(description|group_label|view_label|label|persist_for)\s*:\s*(\w*)
    captures:
      1:
        name: keyword.control.option_string.lookml
      2:
        name: invalid.illegal.string.lookml

  explore_option_string_array:
    begin: \b(tags)\s*:\s*\[
    beginCaptures:
      1:
        name: keyword.control.tags.lookml
    end: \]
    patterns:
      - include: "#comments"
      - include: "#string"

  explore_option_yesno:
    match: \b(hidden|case_sensitive|symmetric_aggregates)\s*:\s*(\w*)
    captures:
      1:
        name: keyword.control.option_yesno.lookml
      2:
        patterns:
          - include: "#yesno"

  explore_option_ident:
    patterns:
      - match: \b(from|view_name|persist_with)\s*:\s*([$@]\{[\w.]*\})
        captures:
          1:
            name: keyword.control.option_ident.lookml
          2:
            name: invalid.illegal.ident.lookml
      - match: \b(from|persist_with|view_name)\s*:\s*([A-Za-z0-9_$@*.-]*)
        captures:
          1:
            name: keyword.control.option_ident.lookml
          2:
            patterns:
              - include: "#ident_no_dot"

  explore_option_ident_array:
    begin: \b(cancel_grouping_fields)\s*:\s*\[
    beginCaptures:
      1:
        name: keyword.control.option_ident_array.lookml
    end: \]
    patterns:
      - include: "#comments"
      - include: "#ident"

  explore_option_ident_no_dot_array:
    begin: \b(extends|always_join|required_access_grants)\s*:\s*\[
    beginCaptures:
      1:
        name: keyword.control.option_ident_no_dot_array.lookml
    end: \]
    patterns:
      - include: "#comments"
      - include: "#ident_no_dot"

  explore_option_sql:
    begin: \b(sql_(always_where|always_having|table_name))\s*:\s*
    beginCaptures:
      1:
        name: keyword.control.sql_option.lookml
    end: ;;
    endCaptures:
      0:
        name: punctuation.terminator.semi_semi.lookml
    patterns:
      - begin: \G
        end: (?=;;)
        contentName: meta.embedded.block.sql
        patterns:
          - include: "#constant_ref"
          - include: "#dollar_field_ref"
          - include: "source.sql"

  # ------------------------------
  # files parameter for explore
  # ------------------------------
  fields_explore:
    begin: \b(fields)\s*:\s*\[
    beginCaptures:
      1:
        name: keyword.control.fields.lookml
    end: \]
    patterns:
      - include: "#comments"
      - include: "#fields_allow_minus"
      # all field
      - match: (\B-|\b)[A-Za_z0-9_]+\.[A-Za_z0-9_]+(\*\B|\b)
      - match: (\B-|\b)(ALL_FIELDS)(\*\B|\b)
        captures:
          2:
            name: support.constant.all_fields.lookml


  # ------------------------------
  # access filter
  # ------------------------------
  access_filter:
    begin: \b(access_filter)\s*:\s*([A-Za-z0-9_$@*.-]*)\s*\{
    beginCaptures:
      1:
        name: keyword.control.test.lookml
      2:
        patterns:
          - include: "#ident_no_dot"
    end: \}
    patterns:
      - include: "#comments"
      - include: "#access_filter_option_ident"
      - include: "#field"
      - include: "#undefined_block"

  access_filter_option_ident:
    patterns:
      - match: \b(user_attribute)\s*:\s*([$@]\{[\w.]*\})
        captures:
          1:
            name: keyword.control.option_ident.lookml
          2:
            name: invalid.illegal.ident.lookml
      - match: \b(user_attribute)\s*:\s*([A-Za-z0-9_$@*.-]*)
        captures:
          1:
            name: keyword.control.option_ident.lookml
          2:
            patterns:
              - include: "#ident_no_dot"

  # ------------------------------
  # explore filters
  # ------------------------------
  always_filter:
    begin: \b(always_filter)\s*:\s*\{
    beginCaptures:
      1:
        name: keyword.control.always_filter.lookml
    end: \}
    patterns:
      - include: "#comments"
      - include: "#filters"
      - include: "#undefined_block"

  conditionally_filter:
    begin: \b(conditionally_filter)\s*:\s*\{
    beginCaptures:
      1:
        name: keyword.control.conditionally_filter.lookml
    end: \}
    patterns:
      - include: "#comments"
      - include: "#conditionally_filter_option_ident_array"
      - include: "#filters"
      - include: "#undefined_block"

  conditionally_filter_option_ident_array:
    begin: \b(unless)\s*:\s*\[
    beginCaptures:
      1:
        name: keyword.control.option_ident_array.lookml
    end: \]
    patterns:
      - include: "#comments"
      - include: "#ident"

  # ------------------------------
  # join
  # ------------------------------
  join:
    begin: \b(join)\s*:\s*([A-Za-z0-9_$@*.-]*)\s*\{
    beginCaptures:
      1:
        name: keyword.control.join.lookml
      2:
        patterns:
          - include: "#ident_no_dot"
    end: \}
    patterns:
      - include: "#comments"
      - include: "#join_option_string"
      - include: "#join_option_yesno"
      - include: "#join_option_ident"
      - include: "#join_option_ident_no_dot_array"
      - include: "#join_option_sql"
      - include: "#fields_join"
      - include: "#relationship"
      - include: "#join_type"
      - include: "#string"
      - include: "#undefined_block"

  join_option_string:
    match: \b(view_label)\s*:\s*(\w*)
    captures:
      1:
        name: keyword.control.option_string.lookml
      2:
        name: invalid.illegal.string.lookml

  join_option_yesno:
    match: \b(outer_only)\s*:\s*(\w*)
    captures:
      1:
        name: keyword.control.option_yesno.lookml
      2:
        patterns:
          - include: "#yesno"

  join_option_ident:
    match: \b(from|foreign_key)\s*:\s*([A-Za-z0-9_$@*.-]*)
    captures:
      1:
        name: keyword.control.option_ident.lookml
      2:
        patterns:
          - include: "#ident_no_dot"

  join_option_ident_no_dot_array:
    begin: \b(required_joins|required_access_grants)\s*:\s*\[
    beginCaptures:
      1:
        name: keyword.control.option_ident_no_dot_array.lookml
    end: \]
    patterns:
      - include: "#comments"
      - include: "#ident_no_dot"

  join_option_sql:
    begin: \b(sql_(on|where|table_name|foreign_key)|sql)\s*:\s*
    beginCaptures:
      1:
        name: keyword.control.sql_option.lookml
    end: ;;
    endCaptures:
      0:
        name: punctuation.terminator.semi_semi.lookml
    patterns:
      - begin: \G
        end: (?=;;)
        contentName: meta.embedded.block.sql
        patterns:
          - include: "#constant_ref"
          - include: "#dollar_field_ref"
          - include: "source.sql"

  fields_join:
    begin: \b(fields)\s*:\s*\[
    beginCaptures:
      1:
        name: keyword.control.option_ident_no_dot_array.lookml
    end: \]
    patterns:
      - include: "#comments"
      - include: "#fields_allow_star"

  relationship:
    match: \b(relationship)\s*:\s*(\w*)
    captures:
      1:
        name: keyword.control.relationship.lookml
      2:
        patterns:
          - name: support.constant.relationship.lookml
            match: \b((one|many)_to_(one|many))\b
          - name: invalid.illegal.relationship.lookml
            match: "[^\\s]+"

  join_type:
    match: \b(type)\s*:\s*(\w*)
    captures:
      1:
        name: keyword.control.join_type.lookml
      2:
        patterns:
          - name: support.constant.join_type.lookml
            match: \b(inner|(left|full)_outer|cross)\b
          - name: invalid.illegal.join_type.lookml
            match: "[^\\s]+"

  # ------------------------------
  # aggregation awareness
  # ------------------------------
  aggregate_table:
    begin: \b(aggregate_table)\s*:\s*([A-Za-z0-9_$@*.-]*)\s*\{
    beginCaptures:
      1:
        name: keyword.control.aggregate_table.lookml
      2:
        patterns:
          - include: "#ident_no_dot"
    end: \}
    patterns:
      - include: "#comments"
      - include: "#aggregate_table_query"
      - include: "#materialization"
      - include: "#undefined_block"

  aggregate_table_query:
    begin: \b(query)\s*:\s*([A-Za-z0-9_$@*.-]*)\s*\{
    beginCaptures:
      1:
        name: keyword.control.query.lookml
      2:
        patterns:
          - include: "#ident_no_dot"
    end: \}
    patterns:
      - include: "#comments"
      - include: "#aggregate_table_query_ident_array"
      - include: "#timezone"
      - include: "#sorts"
      - include: "#filters"
      - include: "#undefined_block"

  aggregate_table_query_ident_array:
    begin: \b(dimensions|measures)\s*:\s*\[
    beginCaptures:
      1:
        name: keyword.control.option_ident_array.lookml
    end: \]
    patterns:
      - include: "#comments"
      - include: "#ident"

  ### materialization controls

  materialization:
    begin: \b(materialization)\s*:\s*\{
    beginCaptures:
      1:
        name: keyword.control.materialization.lookml
    end: \}
    patterns:
      - include: "#comments"
      - include: "#materialization_option_string"
      - include: "#materialization_option_string_array"
      - include: "#materialization_option_numeric"
      - include: "#materialization_option_ident"
      - include: "#materialization_option_sql"
      - include: "#distribution_style"
      - include: "#datagroup_trigger"
      - include: "#string"
      - include: "#undefined_block"

  materialization_option_string:
    match: \b(persist_for|distribution)\s*:\s*(\w*)
    captures:
      1:
        name: keyword.control.option_string.lookml
      2:
        name: invalid.illegal.string.lookml

  materialization_option_string_array:
    begin: \b(cluster_keys|indexes|partition_keys|sortkeys|increment_key)\s*:\s*\[
    beginCaptures:
      1:
        name: keyword.control.option_string_array.lookml
    end: \]
    patterns:
      - include: "#comments"
      - include: "#string"

  materialization_option_numeric:
    match: \b(increment_offset)\s*:\s*(\w*)
    captures:
      1:
        name: keyword.control.option_numeric.lookml
      2:
        patterns:
          - include: "#numeric"

  materialization_option_sql:
    begin: \b(sql_trigger_value)\s*:\s*
    beginCaptures:
      1:
        name: keyword.control.sql_option.lookml
    end: ;;
    endCaptures:
      0:
        name: punctuation.terminator.semi_semi.lookml
    patterns:
      - begin: \G
        end: (?=;;)
        contentName: meta.embedded.block.sql
        patterns:
          - include: "#constant_ref"
          - include: "#dollar_field_ref"
          - include: "source.sql"

  # ------------------------------
  # query (quick start)
  # ------------------------------
  quick_start_query:
    begin: \b(query)\s*:\s*([A-Za-z0-9_$@*.-]*)\s*\{
    beginCaptures:
      1:
        name: keyword.control.query.lookml
      2:
        patterns:
          - include: "#ident_no_dot"
    end: \}
    patterns:
      - include: "#comments"
      - include: "#quick_start_query_option_string"
      - include: "#quick_start_query_option_numeric"
      - include: "#quick_start_query_option_ident_array"
      - include: "#sorts"
      - include: "#filters"
      - include: "#string"
      - include: "#undefined_block"

  quick_start_query_option_string:
    match: \b(label|description)\s*:\s*(\w*)
    captures:
      1:
        name: keyword.control.option_string.lookml
      2:
        name: invalid.illegal.string.lookml

  quick_start_query_option_numeric:
    match: \b(limit)\s*:\s*(\w*)
    captures:
      1:
        name: keyword.control.option_numeric.lookml
      2:
        patterns:
          - include: "#numeric"

  quick_start_query_option_ident_array:
    begin: \b(dimensions|measures|pivots)\s*:\s*\[
    beginCaptures:
      1:
        name: keyword.control.option_ident_array.lookml
    end: \]
    patterns:
      - include: "#comments"
      - include: "#ident"

  # ==============================================
  # View specific parameter blocks
  # ==============================================
  view:
    begin: \b(view)\s*:\s*\+?([A-Za-z0-9_$@*.-]*)\s*\{
    beginCaptures:
      1:
        name: keyword.control.view.lookml
      2:
        patterns:
          - include: "#ident_no_dot"
    end: \}
    patterns:
      - include: "#comments"
      - include: "#derived_table"
      - include: "#view_option_string"
      - include: "#view_option_ident_no_dot_array"
      - include: "#view_option_yesno"
      - include: "#view_option_sql"
      - include: "#field_def"
      - include: "#set"
      - include: "#drill_fields"
      - include: "#extension"
      - include: "#string"
      - include: "#undefined_block"

  view_option_string:
    match: \b(label)\s*:\s*(\w*)
    captures:
      1:
        name: keyword.control.option_string.lookml
      2:
        name: invalid.illegal.string.lookml

  view_option_ident_no_dot_array:
    begin: \b(extends|required_access_grants)\s*:\s*\[
    beginCaptures:
      1:
        name: keyword.control.option_ident_no_dot_array.lookml
    end: \]
    patterns:
      - include: "#comments"
      - include: "#ident_no_dot"

  view_option_yesno:
    match: \b(fields_hidden_by_default|suggestions|final)\s*:\s*(\w*)
    captures:
      1:
        name: keyword.control.option_yesno.lookml
      2:
        patterns:
          - include: "#yesno"

  view_option_sql:
    begin: \b(sql_table_name)\s*:\s*
    beginCaptures:
      1:
        name: keyword.control.sql_option.lookml
    end: ;;
    endCaptures:
      0:
        name: punctuation.terminator.semi_semi.lookml
    patterns:
      - begin: \G
        end: (?=;;)
        contentName: meta.embedded.block.sql
        patterns:
          - include: "#constant_ref"
          - include: "#dollar_field_ref"
          - include: "source.sql"

  # ------------------------------
  # set, drill fields
  # ------------------------------
  set:
    begin: \b(set)\s*:\s*([A-Za-z0-9_$@*.-]*)\s*\{
    beginCaptures:
      1:
        name: keyword.control.set.lookml
      2:
        patterns:
          - include: "#ident_no_dot"
    end: \}
    patterns:
      - include: "#comments"
      - begin: \b(fields)\s*:\s*\[
        beginCaptures:
          1:
            name: keyword.control.option_ident_no_dot_array.lookml
        end: \]
        patterns:
          - include: "#comments"
          - include: "#fields_allow_star"
      - include: "#undefined_block"

  # ------------------------------
  # derived table
  # ------------------------------
  derived_table:
    begin: \b(derived_table)\s*:\s*\{
    beginCaptures:
      1:
        name: keyword.control.derived_table.lookml
    end: \}
    patterns:
      - include: "#comments"
      - include: "#derived_table_option_string"
      - include: "#derived_table_option_string_array"
      - include: "#derived_table_option_numeric"
      - include: "#derived_table_option_yesno"
      - include: "#derived_table_option_sql"
      - include: "#derived_table_explore_source"
      - include: "#table_compression"
      - include: "#table_format"
      - include: "#datagroup_trigger"
      - include: "#create_process"
      - include: "#distribution_style"
      - include: "#string"
      - include: "#undefined_block"

  derived_table_option_string:
    match: \b(persist_for|distribution|interval_trigger|increment_key)\s*:\s*(\w*)
    captures:
      1:
        name: keyword.control.option_string.lookml
      2:
        name: invalid.illegal.string.lookml

  derived_table_option_string_array:
    begin: \b(cluster_keys|indexes|partition_keys|sortkeys)\s*:\s*\[
    beginCaptures:
      1:
        name: keyword.control.option_string_array.lookml
    end: \]
    patterns:
      - include: "#comments"
      - include: "#string"

  derived_table_option_numeric:
    match: \b(increment_offset)\s*:\s*(\w*)
    captures:
      1:
        name: keyword.control.option_numeric.lookml
      2:
        patterns:
          - include: "#numeric"

  derived_table_option_yesno:
    match: \b(materialized_view|publish_as_db_view)\s*:\s*(\w*)
    captures:
      1:
        name: keyword.control.option_yesno.lookml
      2:
        patterns:
          - include: "#yesno"

  derived_table_option_sql:
    begin: \b(sql(_trigger_value|_create)?)\s*:\s*
    beginCaptures:
      1:
        name: keyword.control.sql_option.lookml
    end: ;;
    endCaptures:
      0:
        name: punctuation.terminator.semi_semi.lookml
    patterns:
      - begin: \G
        end: (?=;;)
        contentName: meta.embedded.block.sql
        patterns:
          - include: "#constant_ref"
          - include: "#dollar_field_ref"
          - include: "source.sql"

  create_process:
    begin: \b(create_process)\s*:\s*\{
    beginCaptures:
      1:
        name: keyword.control.create_process.lookml
    end: \}
    patterns:
      - include: "#comments"
      - patterns:
          - begin: \b(sql_step)\s*:\s*
            beginCaptures:
              1:
                name: keyword.control.sql_option.lookml
            end: ;;
            endCaptures:
              0:
                name: punctuation.terminator.semi_semi.lookml
            patterns:
              - begin: \G
                end: (?=;;)
                contentName: meta.embedded.block.sql
                patterns:
                  - include: "#constant_ref"
                  - include: "#dollar_field_ref"
                  - include: "source.sql"
      - include: "#undefined_block"

  table_compression:
    match: \b(table_compression)\s*:\s*(\w*)
    captures:
      1:
        name: keyword.control.table_compression.lookml
      2:
        patterns:
          - name: support.constant.table_compression.lookml
            match: \b(GZIP|SNAPPY)\b
          - name: invalid.illegal.table_compression.lookml
            match: "[^\\s]+"

  table_format:
    match: \b(table_format)\s*:\s*(\w*)
    captures:
      1:
        name: keyword.control.table_format.lookml
      2:
        patterns:
          - name: support.constant.table_format.lookml
            match: \b(PARQUET|ORC|AVRO|JSON|TEXTFILE)\b
          - name: invalid.illegal.table_format.lookml
            match: "[^\\s]+"

  # ------------------------------
  # explore source
  # ------------------------------
  derived_table_explore_source:
    begin: \b(explore_source)\s*:\s*([A-Za-z0-9_$@*.-]*)\s*\{
    beginCaptures:
      1:
        name: keyword.control.explore_source.lookml
      2:
        patterns:
          - include: "#ident_no_dot"
    end: \}
    patterns:
      - include: "#comments"
      - include: "#column"
      - include: "#derived_column"
      - include: "#expression_custom_filter"
      - include: "#filters"
      - include: "#sorts"
      - include: "#limit"
      - include: "#timezone"
      - include: "#bind_filters"
      - include: "#bind_all_filters"
      - include: "#string"
      - include: "#undefined_block"

  derived_column:
    begin: \b(derived_column)\s*:\s*([A-Za-z0-9_$@*.-]*)\s*\{
    beginCaptures:
      1:
        name: keyword.control.derived_column.lookml
      2:
        patterns:
          - include: "#ident_no_dot"
    end: \}
    patterns:
      - include: "#comments"
      - begin: \b(sql)\s*:\s*
        beginCaptures:
          1:
            name: keyword.control.sql_option.lookml
        end: ;;
        endCaptures:
          0:
            name: punctuation.terminator.semi_semi.lookml
        patterns:
          - begin: \G
            end: (?=;;)
            contentName: meta.embedded.block.sql
            patterns:
              - include: "#constant_ref"
              - include: "#dollar_field_ref"
              - include: "source.sql"
      - include: "#undefined_block"

  bind_filters:
    begin: \b(bind_filters)\s*:\s*([A-Za-z0-9_$@*.-]*)\s*\{
    beginCaptures:
      1:
        name: keyword.control.bind_filters.lookml
      2:
        patterns:
          - include: "#ident_no_dot"
    end: \}
    patterns:
      - include: "#comments"
      - patterns:
          - match: \b((from|to)_field)\s*:\s*([A-Za-z0-9_$@*.-]*)
            captures:
              1:
                name: keyword.control.option_ident.lookml
              3:
                patterns:
                  - include: "#ident"
      - include: "#undefined_block"

  bind_all_filters:
    match: \b(bind_all_filters)\s*:\s*(\w*)
    captures:
      1:
        name: keyword.control.option_yesno.lookml
      2:
        patterns:
          - include: "#yesno"


  # ==============================================
  # fields parameter
  # ==============================================
  field_def:
    patterns:
      - include: "#dimension"
      - include: "#dimension_group"
      - include: "#measure"
      - include: "#filter"
      - include: "#parameter"

  dimension:
    begin: \b(dimension)\s*:\s*([A-Za-z0-9_$@*.-]*)\s*\{
    beginCaptures:
      1:
        name: keyword.control.dimension.lookml
      2:
        patterns:
          - include: "#ident_no_dot"
    end: \}
    patterns:
      - include: "#comments"
      # string option
      - match: \b(view_label|label|description|group(?:_item)?_label|suggest_persist_for|value_format|fanout_on)\s*:\s*
        captures:
          1:
            name: keyword.control.option_string.lookml
      # string array
      - begin: \b(tags|suggestions)\s*:\s*\[
        beginCaptures:
          1:
            name: keyword.control.option_string_array.lookml
        end: \]
        patterns:
          - include: "#comments"
          - include: "#string"
      # identifier without dot
      - match: \b(suggest_explore|value_format_name|map_layer_name)\s*:\s*([$@]\{[A-Za-z0-9_$@*.-]*\})
        captures:
          1:
            name: keyword.control.option_ident.lookml
          2:
            name: invalid.illegal.ident.lookml
      - match: \b(suggest_explore|value_format_name|map_layer_name)\s*:\s*([A-Za-z0-9_$@*.-]*)
        captures:
          1:
            name: keyword.control.option_ident.lookml
          2:
            patterns:
              - include: "#ident_no_dot"
      # identifier with dot
      - match: \b(suggest_dimension|label_from_parameter|(?:start|end)_location_field)\s*:\s*([$@]\{[A-Za-z0-9_$@*.-]*\})
        captures:
          1:
            name: keyword.control.option_ident.lookml
          2:
            name: invalid.illegal.ident.lookml
      - match: \b(suggest_dimension|label_from_parameter|(?:start|end)_location_field)\s*:\s*([A-Za-z0-9_$@*.-]*)
        captures:
          1:
            name: keyword.control.option_ident.lookml
          2:
            patterns:
              - include: "#ident"
      # identifier array (without dot)
      - begin: \b(alias|required_access_grants)\s*:\s*\[
        beginCaptures:
          1:
            name: keyword.control.option_ident_array.lookml
        end: \]
        patterns:
          - include: "#comments"
          - include: "#ident_no_dot"
      # identifier array (with dot)
      - begin: \b(required_fields)\s*:\s*\[
        beginCaptures:
          1:
            name: keyword.control.option_ident_array.lookml
        end: \]
        patterns:
          - include: "#comments"
          - include: "#ident"
      # numeric array
      - begin: \b(tiers)\s*:\s*\[
        beginCaptures:
          1:
            name: keyword.control.option_numeric_array.lookml
        end: \]
        patterns:
          - include: "#comments"
          - include: "#numeric"
      # sql
      - begin: \b(sql|sql_(?:latitude|longitude|start|end))\s*:\s*
        beginCaptures:
          1:
            name: keyword.control.sql_option.lookml
        end: ;;
        endCaptures:
          0:
            name: punctuation.terminator.semi_semi.lookml
        patterns:
          - begin: \G
            end: (?=;;)
            contentName: meta.embedded.block.sql
            patterns:
              - include: "#constant_ref"
              - include: "#dollar_field_ref"
              - include: "source.sql"
      # html
      - begin: \b(html)\s*:\s*
        beginCaptures:
          1:
            name: keyword.control.html.lookml
        end: ;;
        endCaptures:
          0:
            name: punctuation.terminator.semi_semi.lookml
        patterns:
          - begin: \G
            end: (?=;;)
            contentName: meta.embedded.block.html
            patterns:
              - include: "#constant_ref"
              - include: "text.html.basic"
      # yesno
      - match: \b(hidden|can_filter|alpha_sort|case_sensitive|skip_drill_filter|bypass_suggest_restrictions|full_suggestions|convert_tz|suggestable|allow_fill|primary_key)\s*:\s*(\w*)
        captures:
          1:
            name: keyword.control.option_yesno.lookml
          2:
            patterns:
              - include: "#yesno"
      # type
      - match: \b(type)\s*:\s*([$@]\{[A-Za-z0-9_$@*.-]*\})
        captures:
          1:
            name: keyword.control.option_ident.lookml
          2:
            name: invalid.illegal.ident.lookml
      - match: \b(type)\s*:\s*([A-Za-z0-9_$@*.-]*)
        captures:
          1:
            name: keyword.control.option_ident.lookml
          2:
            patterns:
              - name: support.constant.type.dimension.lookml
                match: \b(bin|distance|location|number|string|tier|yesno|zipcode|int)\b
              - include: "#time_type"
              - include: "#duration_type"
              - name: invalid.illegal.type.dimension.lookml
                match: "[A-Za-z0-9_$@*.-]+"
      # string data type
      - match: \b(string_datatype)\s*:\s*([$@]\{[A-Za-z0-9_$@*.-]*\})
        captures:
          1:
            name: keyword.control.option_ident.lookml
          2:
            name: invalid.illegal.ident.lookml
      - match: \b(string_datatype)\s*:\s*([A-Za-z0-9_$@*.-]*)
        captures:
          1:
            name: keyword.control.option_ident.lookml
          2:
            patterns:
              - name: support.constant.string_datatype.dimension.lookml
                match: \b(unicode)\b
              - name: invalid.illegal.string_datatype.dimension.lookml
                match: "[A-Za-z0-9_$@*.-]+"
      # others
      - include: "#datatype"
      - include: "#units"
      - include: "#drill_fields"
      - include: "#tier_style"
      - include: "#case"
      - include: "#link"
      - include: "#action"
      - include: "#order_by_field"
      - include: "#string"
      - include: "#undefined_block"

  dimension_group:
    begin: \b(dimension_group)\s*:\s*([A-Za-z0-9_$@*.-]*)\s*\{
    beginCaptures:
      1:
        name: keyword.control.dimension_group.lookml
      2:
        patterns:
          - include: "#ident_no_dot"
    end: \}
    patterns:
      - include: "#comments"
      # string option
      - match: \b(view_label|label|description|group(?:_item)?_label|fanout_on)\s*:\s*
        captures:
          1:
            name: keyword.control.option_string.lookml
      # string array
      - begin: \b(tags)\s*:\s*\[
        beginCaptures:
          1:
            name: keyword.control.option_string_array.lookml
        end: \]
        patterns:
          - include: "#comments"
          - include: "#string"
      # identifier without dot
      - match: \b(suggest_explore)\s*:\s*([$@]\{[A-Za-z0-9_$@*.-]*\})
        captures:
          1:
            name: keyword.control.option_ident.lookml
          2:
            name: invalid.illegal.ident.lookml
      - match: \b(suggest_explore)\s*:\s*([A-Za-z0-9_$@*.-]*)
        captures:
          1:
            name: keyword.control.option_ident.lookml
          2:
            patterns:
              - include: "#ident_no_dot"
      # identifier with dot
      - match: \b(suggest_dimension)\s*:\s*([$@]\{[A-Za-z0-9_$@*.-]*\})
        captures:
          1:
            name: keyword.control.option_ident.lookml
          2:
            name: invalid.illegal.ident.lookml
      - match: \b(suggest_dimension)\s*:\s*([A-Za-z0-9_$@*.-]*)
        captures:
          1:
            name: keyword.control.option_ident.lookml
          2:
            patterns:
              - include: "#ident"
      # identifier array (without dot)
      - begin: \b(alias|required_access_grants)\s*:\s*\[
        beginCaptures:
          1:
            name: keyword.control.option_ident_array.lookml
        end: \]
        patterns:
          - include: "#comments"
          - include: "#ident_no_dot"
      # sql
      - begin: \b(sql|sql_(?:start|end))\s*:\s*
        beginCaptures:
          1:
            name: keyword.control.sql_option.lookml
        end: ;;
        endCaptures:
          0:
            name: punctuation.terminator.semi_semi.lookml
        patterns:
          - begin: \G
            end: (?=;;)
            contentName: meta.embedded.block.sql
            patterns:
              - include: "#constant_ref"
              - include: "#dollar_field_ref"
              - include: "source.sql"
      # html
      - begin: \b(html)\s*:\s*
        beginCaptures:
          1:
            name: keyword.control.html.lookml
        end: ;;
        endCaptures:
          0:
            name: punctuation.terminator.semi_semi.lookml
        patterns:
          - begin: \G
            end: (?=;;)
            contentName: meta.embedded.block.html
            patterns:
              - include: "#constant_ref"
              - include: "text.html.basic"
      # yesno
      - match: \b(hidden|can_filter|bypass_suggest_restrictions|full_suggestions|convert_tz|suggestable|allow_fill)\s*:\s*(\w*)
        captures:
          1:
            name: keyword.control.option_yesno.lookml
          2:
            patterns:
              - include: "#yesno"
      # type
      - match: \b(type)\s*:\s*([$@]\{[A-Za-z0-9_$@*.-]*\})
        captures:
          1:
            name: keyword.control.option_ident.lookml
          2:
            name: invalid.illegal.ident.lookml
      - match: \b(type)\s*:\s*([A-Za-z0-9_$@*.-]*)
        captures:
          1:
            name: keyword.control.option_ident.lookml
          2:
            patterns:
              - name: support.constant.type.dimension.lookml
                match: \b(time|duration)\b
              - name: invalid.illegal.type.dimension.lookml
                match: "[A-Za-z0-9_$@*.-]+"
      # others
      - include: "#datatype"
      - include: "#timeframes"
      - include: "#intervals"
      - include: "#drill_fields"
      - include: "#order_by_field"
      - include: "#string"
      - include: "#undefined_block"

  measure:
    begin: \b(measure)\s*:\s*([A-Za-z0-9_$@*.-]*)\s*\{
    beginCaptures:
      1:
        name: keyword.control.measure.lookml
      2:
        patterns:
          - include: "#ident_no_dot"
    end: \}
    patterns:
      - include: "#comments"
      # string option
      - match: \b(view_label|label|description|group(?:_item)?_label|value_format|fanout_on)\s*:\s*
        captures:
          1:
            name: keyword.control.option_string.lookml
      # string array
      - begin: \b(tags)\s*:\s*\[
        beginCaptures:
          1:
            name: keyword.control.option_string_array.lookml
        end: \]
        patterns:
          - include: "#comments"
          - include: "#string"
      # identifier without dot
      - match: \b(suggest_explore|value_format_name)\s*:\s*([$@]\{[A-Za-z0-9_$@*.-]*\})
        captures:
          1:
            name: keyword.control.option_ident.lookml
          2:
            name: invalid.illegal.ident.lookml
      - match: \b(suggest_explore|value_format_name)\s*:\s*([A-Za-z0-9_$@*.-]*)
        captures:
          1:
            name: keyword.control.option_ident.lookml
          2:
            patterns:
              - include: "#ident_no_dot"
      # identifier with dot
      - match: \b(suggest_dimension|label_from_parameter|list_field)\s*:\s*([$@]\{[A-Za-z0-9_$@*.-]*\})
        captures:
          1:
            name: keyword.control.option_ident.lookml
          2:
            name: invalid.illegal.ident.lookml
      - match: \b(suggest_dimension|label_from_parameter|list_field)\s*:\s*([A-Za-z0-9_$@*.-]*)
        captures:
          1:
            name: keyword.control.option_ident.lookml
          2:
            patterns:
              - include: "#ident"
      # identifier array (without dot)
      - begin: \b(alias|required_access_grants)\s*:\s*\[
        beginCaptures:
          1:
            name: keyword.control.option_ident_array.lookml
        end: \]
        patterns:
          - include: "#comments"
          - include: "#ident_no_dot"
      # identifier array (with dot)
      - begin: \b(required_fields)\s*:\s*\[
        beginCaptures:
          1:
            name: keyword.control.option_ident_array.lookml
        end: \]
        patterns:
          - include: "#comments"
          - include: "#ident"
      # numeric
      - match: \b(approximate_threshold|precision|percentile)\s*:\s*(\w*)
        captures:
          1:
            name: keyword.control.option_numeric.lookml
          2:
            patterns:
              - include: "#numeric"
      # yesno
      - match: \b(hidden|can_filter|approximate|allow_approximate_optimization|convert_tz|suggestable)\s*:\s*(\w*)
        captures:
          1:
            name: keyword.control.option_yesno.lookml
          2:
            patterns:
              - include: "#yesno"
      # sql
      - begin: \b(sql|sql_distinct_key)\s*:\s*
        beginCaptures:
          1:
            name: keyword.control.sql_option.lookml
        end: ;;
        endCaptures:
          0:
            name: punctuation.terminator.semi_semi.lookml
        patterns:
          - begin: \G
            end: (?=;;)
            contentName: meta.embedded.block.sql
            patterns:
              - include: "#constant_ref"
              - include: "#dollar_field_ref"
              - include: "source.sql"
      # html
      - begin: \b(html)\s*:\s*
        beginCaptures:
          1:
            name: keyword.control.html.lookml
        end: ;;
        endCaptures:
          0:
            name: punctuation.terminator.semi_semi.lookml
        patterns:
          - begin: \G
            end: (?=;;)
            contentName: meta.embedded.block.html
            patterns:
              - include: "#constant_ref"
              - include: "text.html.basic"
      # direction
      - match: \b(direction)\s*:\s*(\"[^"]*\")?
        captures:
          1:
            name: keyword.control.direction.lookml
          2:
            patterns:
              - name: string.quoted.double.lookml
                match: \"(row|column)\"
              - name: invalid.illegal.direction.lookml
                match: "[^\"]+"
      # type
      - match: \b(type)\s*:\s*([$@]\{[A-Za-z0-9_$@*.-]*\})
        captures:
          1:
            name: keyword.control.option_ident.lookml
          2:
            name: invalid.illegal.ident.lookml
      - match: \b(type)\s*:\s*([A-Za-z0-9_$@*.-]*)
        captures:
          1:
            name: keyword.control.option_ident.lookml
          2:
            patterns:
              - name: support.constant.type.measure.lookml
                match: \b((:?(:?average|count|median|percentile|sum)(:?_distinct)?)|percent_of_(:?previous|total)|running_total|date|list|max|min|number|string|yesno|int)\b
              - name: invalid.illegal.type.measure.lookml
                match: "[A-Za-z0-9_$@*.-]+"
      # others
      - include: "#datatype"
      - include: "#drill_fields"
      - include: "#link"
      - include: "#action"
      - include: "#filters"
      - include: "#order_by_field"
      - include: "#string"
      - include: "#undefined_block"

  filter:
    begin: \b(filter)\s*:\s*([A-Za-z0-9_$@*.-]*)\s*\{
    beginCaptures:
      1:
        name: keyword.control.filter.lookml
      2:
        patterns:
          - include: "#ident_no_dot"
    end: \}
    patterns:
      - include: "#comments"
      # string option
      - match: \b(view_label|label|description|group(?:_item)?_label|suggest_persist_for|default_value)\s*:\s*
        captures:
          1:
            name: keyword.control.option_string.lookml
      # string array
      - begin: \b(tags|suggestions)\s*:\s*\[
        beginCaptures:
          1:
            name: keyword.control.option_string_array.lookml
        end: \]
        patterns:
          - include: "#comments"
          - include: "#string"
      # identifier without dot
      - match: \b(suggest_explore)\s*:\s*([$@]\{[A-Za-z0-9_$@*.-]*\})
        captures:
          1:
            name: keyword.control.option_ident.lookml
          2:
            name: invalid.illegal.ident.lookml
      - match: \b(suggest_explore)\s*:\s*([A-Za-z0-9_$@*.-]*)
        captures:
          1:
            name: keyword.control.option_ident.lookml
          2:
            patterns:
              - include: "#ident_no_dot"
      # identifier with dot
      - match: \b(suggest_dimension)\s*:\s*([$@]\{[A-Za-z0-9_$@*.-]*\})
        captures:
          1:
            name: keyword.control.option_ident.lookml
          2:
            name: invalid.illegal.ident.lookml
      - match: \b(suggest_dimension)\s*:\s*([A-Za-z0-9_$@*.-]*)
        captures:
          1:
            name: keyword.control.option_ident.lookml
          2:
            patterns:
              - include: "#ident"
      # identifier array (without dot)
      - begin: \b(alias|required_access_grants)\s*:\s*\[
        beginCaptures:
          1:
            name: keyword.control.option_ident_array.lookml
        end: \]
        patterns:
          - include: "#comments"
          - include: "#ident_no_dot"
      # sql
      - begin: \b(sql)\s*:\s*
        beginCaptures:
          1:
            name: keyword.control.sql_option.lookml
        end: ;;
        endCaptures:
          0:
            name: punctuation.terminator.semi_semi.lookml
        patterns:
          - begin: \G
            end: (?=;;)
            contentName: meta.embedded.block.sql
            patterns:
              - include: "#constant_ref"
              - include: "#dollar_field_ref"
              - include: "source.sql"
      # yesno
      - match: \b(hidden|case_sensitive|bypass_suggest_restrictions|full_suggestions|convert_tz|suggestable)\s*:\s*(\w*)
        captures:
          1:
            name: keyword.control.option_yesno.lookml
          2:
            patterns:
              - include: "#yesno"
      # type
      - match: \b(type)\s*:\s*([$@]\{[A-Za-z0-9_$@*.-]*\})
        captures:
          1:
            name: keyword.control.option_ident.lookml
          2:
            name: invalid.illegal.ident.lookml
      - match: \b(type)\s*:\s*([A-Za-z0-9_$@*.-]*)
        captures:
          1:
            name: keyword.control.option_ident.lookml
          2:
            patterns:
              - name: support.constant.type.dimension.lookml
                match: \b(number|string|yesno)\b
              - include: "#time_type"
              - name: invalid.illegal.type.dimension.lookml
                match: "[A-Za-z0-9_$@*.-]+"
      # others
      - include: "#datatype"
      - include: "#string"
      - include: "#undefined_block"

  parameter:
    begin: \b(parameter)\s*:\s*([A-Za-z0-9_$@*.-]*)\s*\{
    beginCaptures:
      1:
        name: keyword.control.parameter.lookml
      2:
        patterns:
          - include: "#ident_no_dot"
    end: \}
    patterns:
      - include: "#comments"
      # string option
      - match: \b(view_label|label|description|suggest_persist_for|default_value)\s*:\s*
        captures:
          1:
            name: keyword.control.option_string.lookml
      # string array
      - begin: \b(tags|suggestions)\s*:\s*\[
        beginCaptures:
          1:
            name: keyword.control.option_string_array.lookml
        end: \]
        patterns:
          - include: "#comments"
          - include: "#string"
      # identifier without dot
      - match: \b(suggest_explore)\s*:\s*([$@]\{[A-Za-z0-9_$@*.-]*\})
        captures:
          1:
            name: keyword.control.option_ident.lookml
          2:
            name: invalid.illegal.ident.lookml
      - match: \b(suggest_explore)\s*:\s*([A-Za-z0-9_$@*.-]*)
        captures:
          1:
            name: keyword.control.option_ident.lookml
          2:
            patterns:
              - include: "#ident_no_dot"
      # identifier with dot
      - match: \b(suggest_dimension)\s*:\s*([$@]\{[A-Za-z0-9_$@*.-]*\})
        captures:
          1:
            name: keyword.control.option_ident.lookml
          2:
            name: invalid.illegal.ident.lookml
      - match: \b(suggest_dimension)\s*:\s*([A-Za-z0-9_$@*.-]*)
        captures:
          1:
            name: keyword.control.option_ident.lookml
          2:
            patterns:
              - include: "#ident"
      # identifier array (without dot)
      - begin: \b(alias|required_access_grants)\s*:\s*\[
        beginCaptures:
          1:
            name: keyword.control.option_ident_array.lookml
        end: \]
        patterns:
          - include: "#comments"
          - include: "#ident_no_dot"
      # yesno
      - match: \b(hidden|bypass_suggest_restrictions|full_suggestions|convert_tz|suggestable)\s*:\s*(\w*)
        captures:
          1:
            name: keyword.control.option_yesno.lookml
          2:
            patterns:
              - include: "#yesno"
      # type
      - match: \b(type)\s*:\s*([$@]\{[A-Za-z0-9_$@*.-]*\})
        captures:
          1:
            name: keyword.control.option_ident.lookml
          2:
            name: invalid.illegal.ident.lookml
      - match: \b(type)\s*:\s*([A-Za-z0-9_$@*.-]*)
        captures:
          1:
            name: keyword.control.option_ident.lookml
          2:
            patterns:
              - name: support.constant.type.dimension.lookml
                match: \b(date(?:_time)?|number|string|unquoted|yesno)\b
              - name: invalid.illegal.type.dimension.lookml
                match: "[A-Za-z0-9_$@*.-]+"
      # other
      - include: "#allowed_value"
      - include: "#string"
      - include: "#undefined_block"


  # ------------------------------
  # timeframe
  # ------------------------------
  timeframes:
    begin: \b(timeframes)\s*:\s*\[
    beginCaptures:
      1:
        name: keyword.control.option_ident_array.lookml
    end: \]
    patterns:
      - include: "#comments"
      - name: invalid.illegal.timeframe.lookml
        match: "[$@]\\{[A-Za-z0-9_$@*.-]*\\}"
      - name: support.constant.timeframe.lookml
        match: \b(raw|yesno)\b
      # year
      - name: support.constant.timeframe.lookml
        match: \b((fiscal_)?year|(day|week)_of_year)\b
      # quarter
      - name: support.constant.timeframe.lookml
        match: \b((fiscal_)?quarter(_of_year)?)\b
      # month
      - name: support.constant.timeframe.lookml
        match: \b(month|(fiscal_)?month_num|month_name|day_of_month)\b
      # week, date
      - name: support.constant.timeframe.lookml
        match: \b(week|day_of_week(_index)?|date)\b
      # time
      - name: support.constant.timeframe.lookml
        match: \b(time(_of_day)?)\b
      # hour
      - name: support.constant.timeframe.lookml
        match: \b(hour(_of_day|2|3|4|6|8|12)?)\b
      # minute
      - name: support.constant.timeframe.lookml
        match: \b(minute(2|3|4|5|6|10|12|15|20|30)?)\b
      # second
      - name: support.constant.timeframe.lookml
        match: \b((milli|micro)?second)\b
      - name: support.constant.timeframe.lookml
        match: \b(millisecond(2|4|5|8|10|20|25|40|50|100|125|200|250|500))\b
      # invalid
      - name: invalid.illegal.timeframe.lookml
        match: "[A-Za-z0-9_$@*.-]+"

  time_type:
    patterns:
      # special type
      - name: support.constant.timeframe.lookml
        match: \bdate_(raw)\b
      # year
      - name: support.constant.timeframe.lookml
        match: \bdate_((fiscal_)?year|(day|week)_of_year)\b
      # quarter
      - name: support.constant.timeframe.lookml
        match: \bdate_((fiscal_)?quarter(_of_year)?)\b
      # month
      - name: support.constant.timeframe.lookml
        match: \bdate_(month|(fiscal_)?month_num|month_name|day_of_month)\b
      # week, date
      - name: support.constant.timeframe.lookml
        match: \bdate\b
      - name: support.constant.timeframe.lookml
        match: \bdate_(week|day_of_week(_index)?|date)\b
      # time
      - name: support.constant.timeframe.lookml
        match: \bdate_(time(_of_day)?)\b
      # hour
      - name: support.constant.timeframe.lookml
        match: \bdate_(hour(_of_day|2|3|4|6|8|12)?)\b
      # minute
      - name: support.constant.timeframe.lookml
        match: \bdate_(minute(2|3|4|5|6|10|12|15|20|30)?)\b
      # second
      - name: support.constant.timeframe.lookml
        match: \bdate_((milli|micro)?second)\b
      - name: support.constant.timeframe.lookml
        match: \bdate_(millisecond(2|4|5|8|10|20|25|40|50|100|125|200|250|500))\b


  intervals:
    begin: \b(intervals)\s*:\s*\[
    beginCaptures:
      1:
        name: keyword.control.option_ident_array.lookml
    end: \]
    patterns:
      - include: "#comments"
      - name: invalid.illegal.timeframe.lookml
        match: "[$@]\\{[A-Za-z0-9_$@*.-]*\\}"
      - match: \b(day|hour|minute|month|quarter|second|week|year)\b
        captures:
          1:
            name: support.constant.interval.lookml
      - name: invalid.illegal.timeframe.lookml
        match: "[A-Za-z0-9_$@*.-]+"

  duration_type:
    name: support.constant.duration.lookml
    match: \bduration_(day|hour|minute|month|quarter|second|week|year)\b

  # ------------------------------
  # other field options
  # ------------------------------
  datatype:
    match: \b(datatype)\s*:\s*(\w*)
    captures:
      1:
        name: keyword.control.datatype.lookml
      2:
        patterns:
          - name: support.constant.datatype.lookml
            match: \b(epoch|timestamp|datetime|date|yyyymmdd)\b
          - name: invalid.illegal.datatype.lookml
            match: "[^\\s]+"

  units:
    match: \b(units)\s*:\s*(\w*)
    captures:
      1:
        name: keyword.control.units.lookml
      2:
        patterns:
          - name: support.constant.units.lookml
            match: \b(feet|kilometers|meters|miles|nautical_miles|yards)\b
          - name: invalid.illegal.units.lookml
            match: "[^\\s]+"

  case:
    patterns:
      - begin: \b(case)\s*:\s*\{
        beginCaptures:
          1:
            name: keyword.control.case.lookml
        end: \}
        patterns:
          - include: "#comments"
          - begin: \b(when)\s*:\s*\{
            beginCaptures:
              1:
                name: keyword.control.when.lookml
            end: \}
            patterns:
              - include: "#comments"
              - match: \b(label)\s*:\s*
                captures:
                  1:
                    name: keyword.control.option_string.lookml
              - begin: \b(sql)\s*:\s*
                beginCaptures:
                  1:
                    name: keyword.control.sql_option.lookml
                end: ;;
                endCaptures:
                  0:
                    name: punctuation.terminator.semi_semi.lookml
                patterns:
                  - begin: \G
                    end: (?=;;)
                    contentName: meta.embedded.block.sql
                    patterns:
                      - include: "#constant_ref"
                      - include: "#dollar_field_ref"
                      - include: "source.sql"
              - include: "#string"
              - include: "#undefined_block"
          - include: "#undefined_block"

  action:
    patterns:
      - begin: \b(action)\s*:\s*\{
        beginCaptures:
          1:
            name: keyword.control.action.lookml
        end: \}
        patterns:
          - include: "#comments"
          # string option
          - match: \b(label|(:?(:?icon|form)_)?url)\s*:\s*
            captures:
              1:
                name: keyword.control.option_string.lookml
          # param
          - begin: \b(param)\s*:\s*\{
            beginCaptures:
              1:
                name: keyword.control.param.lookml
            end: \}
            patterns:
              - include: "#comments"
              # string option
              - match: \b(name|value)\s*:\s*
                captures:
                  1:
                    name: keyword.control.option_string.lookml
              - include: "#string"
              - include: "#undefined_block"
          # form_param
          - begin: \b(form_param)\s*:\s*\{
            beginCaptures:
              1:
                name: keyword.control.form_param.lookml
            end: \}
            patterns:
              - include: "#comments"
              # string option
              - match: \b(label|name|default)\s*:\s*
                captures:
                  1:
                    name: keyword.control.option_string.lookml
              # yesno
              - match: \b(required)\s*:\s*(\w*)
                captures:
                  1:
                    name: keyword.control.option_yesno.lookml
                  2:
                    patterns:
                      - include: "#yesno"
              # option
              - begin: \b(option)\s*:\s*\{
                beginCaptures:
                  1:
                    name: keyword.control.option.lookml
                end: \}
                patterns:
                  - include: "#comments"
                  # string option
                  - match: \b(name|value)\s*:\s*
                    captures:
                      1:
                        name: keyword.control.option_string.lookml
                  - include: "#string"
                  - include: "#undefined_block"
              # type
              - match: \b(type)\s*:\s*([$@]\{[A-Za-z0-9_$@*.-]*\})
                captures:
                  1:
                    name: keyword.control.option_ident.lookml
                  2:
                    name: invalid.illegal.ident.lookml
              - match: \b(type)\s*:\s*([A-Za-z0-9_$@*.-]*)
                captures:
                  1:
                    name: keyword.control.option_ident.lookml
                  2:
                    patterns:
                      - name: support.constant.type.action.lookml
                        match: \b(select|string|textarea)\b
                      - name: invalid.illegal.type.action.lookml
                        match: "[A-Za-z0-9_$@*.-]+"
              - include: "#string"
              - include: "#undefined_block"
          - include: "#string"
          - include: "#undefined_block"

  link:
    begin: \b(link)\s*:\s*\{
    beginCaptures:
      1:
        name: keyword.control.link.lookml
    end: \}
    patterns:
      - include: "#comments"
      - match: \b(url|label|icon_url)\s*:\s*
        captures:
          1:
            name: keyword.control.option_string.lookml
      - include: "#string"
      - include: "#undefined_block"

  order_by_field:
    patterns:
      - match: \b(order_by_field)\s*:\s*([$@]\{[A-Za-z0-9_$@*.]*\})
        captures:
          1:
            name: keyword.control.option_ident.lookml
          2:
            name: invalid.illegal.ident.lookml
      - match: \b(order_by_field)\s*:\s*([A-Za-z0-9_$@*.-]*)
        captures:
          1:
            name: keyword.control.option_ident.lookml
          2:
            patterns:
              - include: "#ident"

  tier_style:
    match: \b(style)\s*:\s*(\w*)
    captures:
      1:
        name: keyword.control.tier_style.lookml
      2:
        patterns:
          - name: support.constant.tier_style.lookml
            match: \b(classic|interval|integer|relational)\b
          - name: invalid.illegal.tier_style.lookml
            match: "[^\\s]+"

  allowed_value:
    begin: \b(allowed_value)\s*:\s*\{
    beginCaptures:
      1:
        name: keyword.control.allowed_value.lookml
    end: \}
    patterns:
      - include: "#comments"
      - match: \b(label|value)\s*:\s*
        captures:
          1:
            name: keyword.control.option_string.lookml
      - include: "#string"
      - include: "#undefined_block"


  # ==============================================
  # test specific parameter blocks
  # ==============================================
  test:
    begin: \b(test)\s*:\s*([A-Za-z0-9_$@*.-]*)\s*\{
    beginCaptures:
      1:
        name: keyword.control.test.lookml
      2:
        patterns:
          - include: "#ident_no_dot"
    end: \}
    patterns:
      - include: "#comments"
      - include: "#test_explore_source"
      - include: "#assert"
      - include: "#undefined_block"

  # ------------------------------
  # explore source
  # ------------------------------
  test_explore_source:
    begin: \b(explore_source)\s*:\s*([A-Za-z0-9_$@*.-]*)\s*\{
    beginCaptures:
      1:
        name: keyword.control.explore_source.lookml
      2:
        patterns:
          - include: "#ident_no_dot"
    end: \}
    patterns:
      - include: "#comments"
      - include: "#column"
      - include: "#expression_custom_filter"
      - include: "#filters"
      - include: "#sorts"
      - include: "#limit"
      - include: "#timezone"
      - include: "#string"
      - include: "#undefined_block"

  # ------------------------------
  # assert
  # ------------------------------
  assert:
    begin: \b(assert)\s*:\s*([A-Za-z0-9_$@*.-]*)\s*\{
    beginCaptures:
      1:
        name: keyword.control.assert.lookml
      2:
        patterns:
          - include: "#ident_no_dot"
    end: \}
    patterns:
      - include: "#comments"
      - include: "#expression"
      - include: "#undefined_block"

  expression:
    begin: \b(expression)\s*:\s*
    beginCaptures:
      0:
        name: keyword.control.expression.lookml
    end: ;;
    endCaptures:
      0:
        name: punctuation.terminator.semi_semi.lookml
    patterns:
      - include: "#constant_ref"
      - include: "#dollar_field_ref"


  # ==============================================
  # common blocks
  # ==============================================
  comments:
    name: comment.line.hash.lookml
    match: "#.*"

  field:
    patterns:
      - match: \b(field)\s*:\s*([$@]\{[A-Za-z0-9_$@*.]*\})
        captures:
          1:
            name: keyword.control.option_ident.lookml
          2:
            name: invalid.illegal.ident.lookml
      - match: \b(field)\s*:\s*([A-Za-z0-9_$@*.-]*)
        captures:
          1:
            name: keyword.control.option_ident.lookml
          2:
            patterns:
              - include: "#ident"

  fields_allow_star:
    patterns:
      # object references
      - name: invalid.illegal.ident1.lookml
        match: "[$@]\\{[A-Za-z0-9_$@*.-]*\\}"
      # invalid  star
      - name: invalid.illegal.ident.lookml
        match: "[A-Za-z0-9_$@*.-]*\\*[A-Za-z0-9_$@*.-]+"
      # invalid character
      - name: invalid.illegal.ident.lookml
        match: "[A-Za-z0-9_$@*.-]*[$@-][A-Za-z0-9_$@*.-]*"
      # two or more dots
      - name: invalid.illegal.ident.lookml
        match: "[A-Za-z0-9_$@*.-]*(\\.[A-Za-z0-9_$@*.-]*){2,}"

  fields_allow_minus:
    patterns:
      # object references
      - name: invalid.illegal.ident1.lookml
        match: "[$@]\\{[A-Za-z0-9_$@*.-]*\\}"
      # invalid minus / star
      - name: invalid.illegal.ident2.lookml
        match: "[A-Za-z0-9_$@*.-]+-[A-Za-z0-9_$@*.-]*"
      - name: invalid.illegal.ident3.lookml
        match: "[A-Za-z0-9_$@*.-]*\\*[A-Za-z0-9_$@*.-]+"
      # invalid character
      - name: invalid.illegal.ident.lookml
        match: "[A-Za-z0-9_$@*.-]*[$@][A-Za-z0-9_$@*.-]*"
      # two or more dots
      - name: invalid.illegal.ident.lookml
        match: "[A-Za-z0-9_$@*.-]*(\\.[A-Za-z0-9_$@*.-]*){2,}"

  filters:
    begin: \b(filters)\s*:\s*\[
    beginCaptures:
      1:
        name: keyword.control.filters.lookml
    end: \]
    patterns:
      - include: "#comments"
      - include: "#ident"
      - include: "#string"

  # ------------------------------
  # references
  # ------------------------------
  constant_ref:
    name: variable.parameter.constant.lookml
    match: \@\{[A-Za-z0-9_]*\}

  dollar_field_ref:
    patterns:
      - name: variable.language.field.lookml
        match: \$\{([A-Za-z0-9_]+\.)?(SQL_TABLE_NAME)\}
        captures:
          2:
            name: support.constant.sql_table_name.lookml
      - name: variable.language.field.lookml
        match: \$\{[A-Za-z0-9_]*(\.[A-Za-z0-9_]*)?\}

  # ------------------------------
  # query, explore source
  # ------------------------------
  sorts:
    begin: \b(sorts)\s*:\s*\[
    beginCaptures:
      1:
        name: keyword.control.sorts.lookml
    end: \]
    patterns:
      - include: "#comments"
      - match: :\s*\b(asc|desc)\b
        captures:
          1:
            name: support.constant.sort.lookml
      - include: "#ident"

  column:
    begin: \b(column)\s*:\s*([A-Za-z0-9_$@*.-]*)\s*\{
    beginCaptures:
      1:
        name: keyword.control.column.lookml
      2:
        patterns:
          - include: "#ident_no_dot"
    end: \}
    patterns:
      - include: "#comments"
      - include: "#field"
      - include: "#undefined_block"

  expression_custom_filter:
    begin: \b(expression_custom_filter)\s*:\s*
    beginCaptures:
      1:
        name: keyword.control.expression_custom_filter.lookml
    end: ;;
    endCaptures:
      0:
        name: punctuation.terminator.semi_semi.lookml
    patterns:
      - begin: \G
        end: (?=;;)
        contentName: meta.embedded.block.sql
        patterns:
          - include: "#constant_ref"
          - include: "#dollar_field_ref"
          - include: "source.sql"

  limit:
    match: \b(limit)\s*:\s*(\w*)
    captures:
      1:
        name: keyword.control.option_numeric.lookml
      2:
        patterns:
          - include: "#numeric"

  # ------------------------------
  # other
  # ------------------------------
  extension:
    match: \b(extension)\s*:\s*(\w*)
    captures:
      1:
        name: keyword.control.extension.lookml
      2:
        patterns:
          - name: support.constant.day.lookml
            match: \b(required)\b
          - name: invalid.illegal.day.lookml
            match: "[^\\s]+"

  drill_fields:
    begin: \b(drill_fields)\s*:\s*\[
    beginCaptures:
      1:
        name: keyword.control.drill_fields.lookml
    end: \]
    patterns:
      - include: "#comments"
      - include: "#fields_allow_star"

  datagroup_trigger:
    match: \b(datagroup_trigger)\s*:\s*([A-Za-z0-9_$@*.-]*)
    captures:
      1:
        name: keyword.control.option_ident.lookml
      2:
        patterns:
          - include: "#ident_no_dot"

  timezone:
    match: \b(timezone)\s*:\s*
    captures:
      1:
        name: keyword.control.option_string.lookml

  distribution_style:
    match: \b(distribution_style)\s*:\s*(\w*)
    captures:
      1:
        name: keyword.control.format.lookml
      2:
        patterns:
          - name: support.constant.distribution_style.lookml
            match: \b(all|even)\b
          - name: invalid.illegal.distribution_style.lookml
            match: "[^\\s]+"

  # ==============================================
  # utility
  # ==============================================
  string:
    name: string.quoted.double.lookml
    begin: \"
    end: \"
    patterns:
      - include: "#constant_ref"
      - name: constant.character.escape.lookml
        match: \\.

  yesno:
    patterns:
      - name: support.constant.yesno.lookml
        match: \b(yes|no)\b
      - name: invalid.illegal.yesno.lookml
        match: '[A-Za-z0-9_$@*.-]+'

  numeric:
    patterns:
      - name: constant.numeric.lookml
        match: \b(\d+)\b
      - name: invalid.illegal.numeric.lookml
        match: '[A-Za-z0-9_$@*.-]+'

  ident_no_dot:
    patterns:
      # object reference
      - name: invalid.illegal.ident.lookml
        match: "[$@]\\{[A-Za-z0-9_$@*.-]*\\}"
      # invalid character
      - name: invalid.illegal.ident.lookml
        match: "[A-Za-z0-9_$@*.-]*[$@*-][A-Za-z0-9_$@*.-]*"
      # has dot
      - name: invalid.illegal.ident.lookml
        match: "[A-Za-z0-9_$@*.-]*(\\.[A-Za-z0-9_$@*.-]*){1,}"

  ident:
    patterns:
      - name: invalid.illegal.ident.lookml
        match: "[$@]\\{[A-Za-z0-9_$@*.-]*\\}"
      # invalid character
      - name: invalid.illegal.ident.lookml
        match: "[A-Za-z0-9_$@*.-]*[$@*-][A-Za-z0-9_$@*.-]*"
      # two or more dots
      - name: invalid.illegal.ident.lookml
        match: "[A-Za-z0-9_$@*.-]*(\\.[A-Za-z0-9_$@*.-]*){2,}"

  undefined_block:
    begin: \{
    end: \}
    patterns:
      - include: "#comments"
      - include: "#undefined_block"

scopeName: source.lookml

patterns:
  - include: "#comments"
  - include: "#model"
  - include: "#test"
  - include: "#string"

repository:
  #==============================================
  # Model specific parameter blocks
  #==============================================
  model:
    patterns:
      - include: "#model_option_string"
      - include: "#model_option_numeric"
      - include: "#model_option_ident"
      - include: "#model_option_yesno"
      - include: "#week_start_day"
      - include: "#named_value_format"
      - include: "#map_layer"
      - include: "#datagroup"
      - include: "#access_grant"

  model_option_string:
    match: \b(label|connection|include|persist_for)\s*:\s*([^\s"]+)?
    captures:
      1:
        name: keyword.control.option_string.lookml
      2:
        name: invalid.illegal.string.lookml

  model_option_numeric:
    match: \b(fiscal_month_offset)\s*:\s*(\d+)?
    captures:
      1:
        name: keyword.control.option_numeric.lookml
      2:
        patterns:
          - include: "#numeric"

  model_option_ident:
    match: \b(persist_with)\s*:\s*([^\s]+)?
    captures:
      1:
        name: keyword.control.option_ident.lookml
      2:
        patterns:
          - include: "#ident_no_dot"

  model_option_yesno:
    match: \b(case_sensitive)\s*:\s*([^\s]+)?
    captures:
      1:
        name: keyword.control.option_ident.lookml
      2:
        patterns:
          - include: "#yesno"

  week_start_day:
    match: \b(week_start_day)\s*:\s*([^\s]+)?
    captures:
      1:
        name: keyword.control.week_start_day.lookml
      2:
        patterns:
          - name: support.constant.day.lookml
            match: \b(monday|tuesday|wednesday|thursday|friday|saturday|sunday)\b
          - name: invalid.illegal.day.lookml
            match: "[^\\s]+"

  # ------------------------------
  # named value format
  # ------------------------------
  named_value_format:
    begin: \b(named_value_format)\s*:\s*([^\s]*)\s*\{
    beginCaptures:
      1:
        name: keyword.control.named_value_format.lookml
      2:
        patterns:
          - include: "#ident_no_dot"
    end: \}
    patterns:
      - include: "#comments"
      - include: "#named_value_format_opt_string"
      - include: "#named_value_format_opt_yesno"
      - include: "#string"

  named_value_format_opt_string:
    match: \b(value_format)\s*:\s*([^\s"]+)?
    captures:
      1:
        name: keyword.control.option_string.lookml
      2:
        name: invalid.illegal.string.lookml

  named_value_format_opt_yesno:
    match: \b(strict_value_format)\s*:\s*([^\s"]+)?
    captures:
      1:
        name: keyword.control.option_yesno.lookml
      2:
        patterns:
          - include: "#yesno"

  # ------------------------------
  # map layer
  # ------------------------------
  map_layer:
    begin: \b(map_layer)\s*:\s*([^\s]*)\s*\{
    beginCaptures:
      1:
        name: keyword.control.map_layer.lookml
      2:
        patterns:
          - include: "#ident_no_dot"
    end: \}
    patterns:
      - include: "#comments"
      - include: "#map_layer_opt_string"
      - include: "#map_layer_opt_numeric"
      - include: "#map_layer_opt_ident"
      - include: "#map_layer_format"
      - include: "#string"

  map_layer_opt_string:
    match: \b(extents_json_url|feature_key|file|label|property_key|property_label_key|url)\s*:\s*([^\s"]+)?
    captures:
      1:
        name: keyword.control.option_string.lookml
      2:
        name: invalid.illegal.string.lookml

  map_layer_opt_numeric:
    match: \b((max|min)_zoom_level)\s*:\s*([^\s"]+)?
    captures:
      1:
        name: keyword.control.option_numeric.lookml
      3:
        patterns:
          - include: "#numeric"

  map_layer_opt_ident:
    match: \b(projection)\s*:\s*([^\s]+)?
    captures:
      1:
        name: keyword.control.option_ident.lookml
      2:
        patterns:
          - include: "#ident_no_dot"

  map_layer_format:
    match: \b(format)\s*:\s*([^\s]+)?
    captures:
      1:
        name: keyword.control.format.lookml
      2:
        patterns:
          - name: support.constant.day.lookml
            match: \b(topojson|vector_tile_region)\b
          - name: invalid.illegal.day.lookml
            match: "[^\\s]+"

  # ------------------------------
  # data group
  # ------------------------------
  datagroup:
    begin: \b(datagroup)\s*:\s*([^\s]*)\s*\{
    beginCaptures:
      1:
        name: keyword.control.datagroup.lookml
      2:
        patterns:
          - include: "#ident_no_dot"
    end: \}
    patterns:
      - include: "#comments"
      - include: "#datagroup_opt_string"
      - include: "#datagroup_sql_trigger"
      - include: "#string"

  datagroup_opt_string:
    match: \b(label|description|max_cache_age)\s*:\s*([^\s"]+)?
    captures:
      1:
        name: keyword.control.option_string.lookml
      2:
        name: invalid.illegal.string.lookml

  datagroup_sql_trigger:
    begin: \b(sql_trigger)\s*:\s*
    beginCaptures:
      1:
        name: keyword.control.sql_trigger.lookml
    end: ;;
    endCaptures:
      0:
        name: punctuation.terminator.semi_semi.lookml
    patterns:
      - begin: \G
        end: (?=;;)
        contentName: meta.embedded.block.sql
        patterns:
          - include: "#constant_ref"
          - include: "source.sql"

  # ------------------------------
  # access grant
  # ------------------------------
  access_grant:
    begin: \b(access_grant)\s*:\s*([^\s]*)\s*\{
    beginCaptures:
      1:
        name: keyword.control.access_grant.lookml
      2:
        patterns:
          - include: "#ident_no_dot"
    end: \}
    patterns:
      - include: "#comments"
      - include: "#access_grant_opt_ident"
      - include: "#access_grant_opt_string_array"

  access_grant_opt_ident:
    match: \b(user_attribute)\s*:\s*([^\s]+)?
    captures:
      1:
        name: keyword.control.option_ident.lookml
      2:
        patterns:
          - include: "#ident_no_dot"

  access_grant_opt_string_array:
    begin: \b(allowed_values)\s*:\s*\[
    beginCaptures:
      1:
        name: keyword.control.option_string_array.lookml.manifest
    end: \]
    patterns:
      - include: "#comments"
      - include: "#string"

  #==============================================
  # test specific parameter blocks
  #==============================================
  test:
    begin: \b(test)\s*:\s*([^\s]*)\s*\{
    beginCaptures:
      1:
        name: keyword.control.test.lookml
      2:
        patterns:
          - include: "#ident_no_dot"
    end: \}
    patterns:
      - include: "#comments"
      - include: "#explore_source"
      - include: "#assert"

  # ------------------------------
  # explore source
  # ------------------------------
  explore_source:
    begin: \b(explore_source)\s*:\s*([^\s]*)\s*\{
    beginCaptures:
      1:
        name: keyword.control.explore_source.lookml
      2:
        patterns:
          - include: "#ident_no_dot"
    end: \}
    patterns:
      - include: "#comments"
      - include: "#column"
      - include: "#filters"

  column:
    begin: \b(column)\s*:\s*([^\s]*)\s*\{
    beginCaptures:
      1:
        name: keyword.control.column.lookml
      2:
        patterns:
          - include: "#ident_no_dot"
    end: \}
    patterns:
      - include: "#comments"
      - include: "#field"

  field:
    match: \b(field)\s*:\s*([^\s]+)?
    captures:
      1:
        name: keyword.control.option_ident.lookml
      2:
        patterns:
          - include: "#ident"

  filters:
    begin: \b(filters)\s*:\s*\[
    beginCaptures:
      1:
        name: keyword.control.filters.lookml
    end: \]
    endCaptures:
      0:
        name: punctuation.terminator.semi_semi.lookml
    patterns:
      - include: "#string"

  # ------------------------------
  # assert
  # ------------------------------
  assert:
    begin: \b(assert)\s*:\s*([^\s]*)\s*\{
    beginCaptures:
      1:
        name: keyword.control.assert.lookml
      2:
        patterns:
          - include: "#ident_no_dot"
    end: \}
    patterns:
      - include: "#comments"
      - include: "#expression"

  # TODO: embed looker expression
  expression:
    begin: \b(expression)\s*:\s*
    beginCaptures:
      0:
        name: keyword.control.expression.lookml
    end: ;;
    endCaptures:
      0:
        name: punctuation.terminator.semi_semi.lookml
    patterns:
      - include: "#constant_ref"
      - include: "#field_ref"

  #==============================================
  # utility
  #==============================================
  comments:
    name: comment.line.hash.lookml
    match: "#.*"

  constant_ref:
    name: variable.parameter.constant.lookml
    match: \@\{[A-Za-z0-9_]*\}

  field_ref:
    name: variable.language.field.lookml
    match: \$\{[A-Za-z0-9_]*(\.[A-Za-z0-9_]*)?\}

  string:
    name: string.quoted.double.lookml
    begin: \"
    end: \"
    patterns:
      - include: "#constant_ref"
      - name: constant.character.escape.lookml
        match: \\.

  yesno:
    patterns:
      - name: support.constant.yesno.lookml
        match: \b(yes|no)\b
      - name: invalid.illegal.yesno.lookml
        match: '[^\s"]+'

  numeric:
    patterns:
      - name: constant.numeric.lookml
        match: \d+
      - name: invalid.illegal.numeric.lookml
        match: '[^\s"]+'

  ident_no_dot:
    patterns:
      - name: meta.definition.ident.lookml
        match: \b[A-Za-z_][A-Za-z0-9_]*\b
      - name: invalid.illegal.ident.modifier.lookml
        match: \.[^\s]*

  ident:
    patterns:
      - name: meta.definition.ident.lookml
        match: \b[A-Za-z_][A-Za-z0-9_]*(\.[A-Za-z_][A-Za-z0-9_]*)*\b
      - name: invalid.illegal.ident.lookml
        match: "[^\\s]*"
